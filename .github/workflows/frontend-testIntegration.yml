name: 【frontend】テスト[統合]

on:
  pull_request:
    branches:
      - main
    paths:
      - frontend/**

defaults:
  run:
    working-directory: frontend

jobs:
  frontend_integration_test:
    name: Playwright integration test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: pnpm/action-setup@v2
        name: Setup pnpm
        id: pnpm-install
        with:
          version: 8

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          # global cacheの cache
          cache: "pnpm"
          cache-dependency-path: |
            frontend/pnpm-lock.yaml

      # node_modelusはキャッシュしてくれないっぽいので自分でやる
      - name: Cache node_modelus
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: frontend-node-modules-${{ hashfiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            frontend-node-modules-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      # playwrightのためのブラウザのバイナリのキャッシュ、古ければ新しいのが install --with-deps時にダウンロードされるので、条件分岐はせずにただキャッシュする
      - name: Cache playwright binaries
        uses: actions/cache@v3
        id: cache-playwright-binaries
        with:
          path: ~/.cache/ms-playwright
          key: frontend-playwright-binaries-
          restore-keys: |
            frontend-playwright-binaries-

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Svelte sync
        run: pnpm prepare

      - name: Integration test
        run: pnpm test:i
    # playwright reportはディレクトリが存在せずうまく行かない上、必要性も薄いのでupload-artifactしない
